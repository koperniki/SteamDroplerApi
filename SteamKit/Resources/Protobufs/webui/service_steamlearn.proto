import "common_base.proto";

message CMsgSteamLearn_BatchOperation_Response {
	repeated .CMsgSteamLearn_CacheData_Response cache_data_responses = 1;
	repeated .CMsgSteamLearn_SnapshotProject_Response snapshot_responses = 2;
}

message CMsgSteamLearn_CacheData_Response {
	optional int32 cache_data_result = 1 [(.description) = "enum"];
}

message CMsgSteamLearn_CreateProject_Request {
	optional string project_name = 1;
	optional string project_description = 2;
}

message CMsgSteamLearn_CreateProject_Response {
	optional int32 result = 1 [(.description) = "enum"];
	optional .CMsgSteamLearnProject project = 2;
}

message CMsgSteamLearn_EditProject_Request {
	optional .CMsgSteamLearnProject project = 1;
	optional uint32 published_version = 2;
}

message CMsgSteamLearn_EditProject_Response {
	optional int32 result = 1 [(.description) = "enum"];
}

message CMsgSteamLearn_GetDataSource_Request {
	optional uint32 data_source_id = 1;
}

message CMsgSteamLearn_GetDataSource_Response {
	optional .CMsgSteamLearnDataSource data_source = 1;
}

message CMsgSteamLearn_GetFetchStatus_Request {
	optional uint32 project_id = 1;
	optional uint32 fetch_id = 2;
}

message CMsgSteamLearn_GetFetchStatus_Response {
	optional int32 result = 1 [(.description) = "enum"];
	optional uint32 fetch_id = 2;
	optional int32 status = 3 [(.description) = "enum"];
	repeated .CMsgSteamLearn_GetFetchStatus_Response_Worker workers = 4;
	optional uint32 total_rows_written = 5;
	optional uint32 total_rows = 6;
	optional uint32 start_time = 7;
	optional uint32 end_time = 8;
}

message CMsgSteamLearn_GetFetchStatus_Response_Worker {
	optional uint32 rows_written = 1;
	optional bool complete = 2;
}

message CMsgSteamLearn_GetFetchStatusVersions_Request {
	optional uint32 project_id = 1;
	optional uint32 published_version = 2;
}

message CMsgSteamLearn_GetFetchStatusVersions_Response {
	repeated uint32 versions = 1;
}

message CMsgSteamLearn_GetProject_Request {
	optional uint32 project_id = 1;
}

message CMsgSteamLearn_GetProject_Response {
	optional .CMsgSteamLearnProject project = 1;
}

message CMsgSteamLearn_GetTrainStatus_Request {
	optional uint32 project_id = 1;
	optional uint32 train_id = 2;
}

message CMsgSteamLearn_GetTrainStatus_Response {
	optional int32 result = 1 [(.description) = "enum"];
	optional uint32 train_id = 2;
	optional uint32 fetch_id = 3;
	optional int32 status = 4 [(.description) = "enum"];
	repeated .CMsgSteamLearn_GetTrainStatus_Response_Epoch epochs = 5;
	optional uint32 total_epochs = 6;
	optional uint32 train_batch_count = 7;
	optional uint32 validate_batch_count = 8;
	optional uint32 test_batch_count = 9;
	repeated .CMsgSteamLearn_GetTrainStatus_Response_Batch test_batches = 10;
	optional float test_loss = 11;
	repeated float test_accuracy = 12;
	optional uint32 start_time = 13;
	optional uint32 end_time = 14;
}

message CMsgSteamLearn_GetTrainStatus_Response_Batch {
	optional float loss = 1;
	repeated float accuracy = 2;
}

message CMsgSteamLearn_GetTrainStatus_Response_Epoch {
	optional uint32 epoch_number = 1;
	optional float epoch_train_loss = 2;
	repeated float epoch_train_accuracy = 3;
	optional float epoch_validate_loss = 4;
	repeated float epoch_validate_accuracy = 5;
	repeated .CMsgSteamLearn_GetTrainStatus_Response_Batch train_batches = 6;
	repeated .CMsgSteamLearn_GetTrainStatus_Response_Batch validate_batches = 7;
	optional uint32 start_time = 8;
	optional uint32 end_time = 9;
}

message CMsgSteamLearn_GetTrainStatusVersions_Request {
	optional uint32 project_id = 1;
	optional uint32 published_version = 2;
}

message CMsgSteamLearn_GetTrainStatusVersions_Response {
	repeated uint32 versions = 1;
}

message CMsgSteamLearn_Inference_Response {
	optional int32 inference_result = 1 [(.description) = "enum"];
	repeated .CMsgSteamLearn_Inference_Response_ReponseValues response_values = 2;
}

message CMsgSteamLearn_Inference_Response_ReponseValues {
	repeated float values = 1;
}

message CMsgSteamLearn_InferenceBackend_Request {
	optional uint32 project_id = 1;
	optional uint32 fetch_id = 2;
	optional uint32 train_id = 3;
	repeated .CMsgSteamLearnRawDataElement data = 4;
	repeated uint32 additional_data = 5;
}

message CMsgSteamLearn_InferenceBackend_Response {
	repeated .CMsgSteamLearn_InferenceBackend_Response_Output outputs = 1;
}

message CMsgSteamLearn_InferenceBackend_Response_BinaryCrossEntropyOutput {
	optional float value = 1;
}

message CMsgSteamLearn_InferenceBackend_Response_CategoricalCrossEntropyOutput {
	repeated float weight = 1;
	repeated float value = 2;
}

message CMsgSteamLearn_InferenceBackend_Response_MutliBinaryCrossEntropyOutput {
	repeated float weight = 1;
	repeated float value = 2;
}

message CMsgSteamLearn_InferenceBackend_Response_Output {
	optional .CMsgSteamLearn_InferenceBackend_Response_BinaryCrossEntropyOutput binary_crossentropy = 1;
	optional .CMsgSteamLearn_InferenceBackend_Response_CategoricalCrossEntropyOutput categorical_crossentropy = 2;
	optional .CMsgSteamLearn_InferenceBackend_Response_MutliBinaryCrossEntropyOutput multi_binary_crossentropy = 3;
}

message CMsgSteamLearn_ListDataSources_Request {
}

message CMsgSteamLearn_ListDataSources_Response {
	repeated .CMsgSteamLearnDataSource data_sources = 1;
	repeated string cache_data_hmac_keys = 2;
	optional string register_data_source_hmac_key = 3;
}

message CMsgSteamLearn_ListProjects_Request {
	optional uint32 appid = 1;
}

message CMsgSteamLearn_ListProjects_Response {
	repeated .CMsgSteamLearnProject projects = 1;
	repeated string snapshot_hmac_keys = 2;
}

message CMsgSteamLearn_PublishProject_Request {
	optional uint32 project_id = 1;
}

message CMsgSteamLearn_PublishProject_Response {
	optional int32 result = 1 [(.description) = "enum"];
}

message CMsgSteamLearn_RegisterDataSource_Response {
	optional int32 result = 1 [(.description) = "enum"];
	optional .CMsgSteamLearnDataSource data_source = 2;
}

message CMsgSteamLearn_SnapshotProject_Response {
	optional int32 snapshot_result = 1 [(.description) = "enum"];
}

message CMsgSteamLearn_Train_Request {
	optional .CMsgSteamLearnProjectConfig project_config = 1;
	optional .CMsgSteamLearn_Train_Request_Fetch fetch = 2;
	optional .CMsgSteamLearn_Train_Request_Train train = 3;
}

message CMsgSteamLearn_Train_Request_Fetch {
	optional uint32 fetch_id = 1;
	optional bool request_cancel = 2;
}

message CMsgSteamLearn_Train_Request_Train {
	optional uint32 train_id = 1;
	optional bool request_cancel = 2;
}

message CMsgSteamLearn_Train_Response {
	optional int32 result = 1 [(.description) = "enum"];
}

message CMsgSteamLearnDataRetentionConfig {
	optional uint32 snapshot_keep_duration_days = 1;
	optional uint32 fetch_keep_count = 2;
}

message CMsgSteamLearnDataSource {
	optional uint32 id = 1;
	optional string name = 2;
	optional uint32 version = 3;
	optional string source_description = 4;
	optional .CMsgSteamLearnDataSourceDescObject structure = 5;
	optional uint32 structure_crc = 6;
	optional uint32 cache_duration_seconds = 7;
}

message CMsgSteamLearnDataSourceDescElement {
	optional string name = 1;
	optional int32 data_type = 2 [(.description) = "enum"];
	optional .CMsgSteamLearnDataSourceDescObject object = 3;
	optional uint32 count = 4;
}

message CMsgSteamLearnDataSourceDescObject {
	repeated .CMsgSteamLearnDataSourceDescElement elements = 1;
}

message CMsgSteamLearnDataSourceElementUsage {
	optional uint32 data_source_id = 1;
	optional string data_element_path = 2;
	optional bool is_string = 3;
	optional uint32 input = 4;
	optional uint32 sql_column = 5;
	optional int32 preprocessing_type = 6 [(.description) = "enum"];
	optional float min_range = 7;
	optional float max_range = 8;
	optional float std_dev = 9;
	optional string compact_table = 10;
}

message CMsgSteamLearnFetchInfo {
	optional uint32 fetch_id = 1;
}

message CMsgSteamLearnInferenceConfig {
	optional uint32 inference_process_count = 1;
	optional uint32 live_train_id = 2;
}

message CMsgSteamLearnModelNodeConcatenate {
}

message CMsgSteamLearnModelNodeConditionalExtract {
	optional int32 extract_type = 1 [(.description) = "enum"];
	optional uint32 appid_release_recency_months = 2;
	optional bool appid_use_release_recency_bias = 3;
}

message CMsgSteamLearnModelNodeConditionalSwap {
}

message CMsgSteamLearnModelNodeDense {
	optional int32 activation = 1 [(.description) = "enum"];
	optional uint32 width = 2;
}

message CMsgSteamLearnModelNodeDenseStack {
	optional int32 activation = 1 [(.description) = "enum"];
	repeated uint32 width = 2;
	optional uint32 dropout_pct = 3;
}

message CMsgSteamLearnModelNodeDropout {
	optional uint32 dropout_pct = 1;
}

message CMsgSteamLearnModelNodeEmbedding {
	optional uint32 max_value = 1;
	optional string compact_table = 2;
	optional uint32 embedding_width = 3;
	optional bool flatten = 4;
}

message CMsgSteamLearnModelNodeExplode {
}

message CMsgSteamLearnModelNodeInput {
	optional uint32 input_num = 1;
}

message CMsgSteamLearnModelNodeKMeansCluster {
	optional uint32 num_clusters = 1;
	optional string name = 2;
}

message CMsgSteamLearnModelNodeOnehot {
	optional uint32 width = 1;
	optional string compact_table = 2;
}

message CMsgSteamLearnModelNodeShuffle {
	optional bool exclude_zeroes = 1;
}

message CMsgSteamLearnModelNodeSyncedShuffle {
	optional bool exclude_zeroes = 1;
}

message CMsgSteamLearnModelNodeTrain {
	optional uint32 input_count = 1;
	optional int32 activation = 2 [(.description) = "enum"];
	optional uint32 width = 3;
	optional string compact_table = 4;
	optional int32 optimizer = 5 [(.description) = "enum"];
	optional int32 loss = 6 [(.description) = "enum"];
}

message CMsgSteamLearnProject {
	optional uint32 project_id = 1;
	optional string project_name = 2;
	optional string project_description = 3;
	optional uint32 creator_account_id = 4;
	optional uint32 create_time = 5;
	optional .CMsgSteamLearnProjectConfig unpublished_config = 6;
	repeated .CMsgSteamLearnProjectConfig published_configs = 7;
}

message CMsgSteamLearnProjectConfig {
	optional uint32 project_id = 1;
	optional uint32 publish_time = 2;
	optional uint32 published_version = 3;
	repeated uint32 data_source_ids = 4;
	repeated .CMsgSteamLearnDataSourceElementUsage data_source_element_usages = 5;
	repeated .CMsgSteamLearnProjectNode project_nodes = 6;
	optional .CMsgSteamLearnProjectSnapshotConfig snapshot_config = 7;
	optional .CMsgSteamLearnTrainConfig train_config = 8;
	optional .CMsgSteamLearnProjectSnapshotFilter snapshot_filter = 11;
	repeated .CMsgSteamLearnProjectConfig_MapDataElementSqlColumnEntry map_data_element_sql_column = 12;
	optional uint32 total_sql_columns = 13;
	optional .CMsgSteamLearnDataRetentionConfig data_retention_config = 14;
	optional .CMsgSteamLearnInferenceConfig inference_config = 15;
	optional .CMsgSteamLearnScheduledTrainConfig scheduled_train_config = 16;
	repeated .CMsgSteamLearnFetchInfo fetch_infos = 17;
	repeated .CMsgSteamLearnTrainInfo train_infos = 18;
}

message CMsgSteamLearnProjectConfig_MapDataElementSqlColumnEntry {
	optional string key = 1;
	optional int32 value = 2;
}

message CMsgSteamLearnProjectNode {
	optional uint32 node_id = 1;
	optional int32 location_x = 2;
	optional int32 location_y = 3;
	optional string comment = 4;
	optional int32 type = 5 [(.description) = "enum"];
	repeated .CMsgSteamLearnProjectNodeConnector connectors = 6;
	optional .CMsgSteamLearnModelNodeInput input = 10;
	optional .CMsgSteamLearnModelNodeDense dense = 11;
	optional .CMsgSteamLearnModelNodeDenseStack dense_stack = 12;
	optional .CMsgSteamLearnModelNodeDropout dropout = 13;
	optional .CMsgSteamLearnModelNodeEmbedding embedding = 14;
	optional .CMsgSteamLearnModelNodeTrain train = 15;
	optional .CMsgSteamLearnModelNodeConditionalExtract conditional_extract = 16;
	optional .CMsgSteamLearnModelNodeConcatenate concatenate = 17;
	optional .CMsgSteamLearnModelNodeShuffle shuffle = 18;
	optional .CMsgSteamLearnModelNodeSyncedShuffle synced_shuffle = 19;
	optional .CMsgSteamLearnModelNodeOnehot onehot = 20;
	optional .CMsgSteamLearnModelNodeExplode explode = 21;
	optional .CMsgSteamLearnModelNodeConditionalSwap conditional_swap = 22;
	optional .CMsgSteamLearnModelNodeKMeansCluster kmeans = 23;
}

message CMsgSteamLearnProjectNodeConnector {
	optional uint32 connector_id = 1;
	repeated uint32 linked_connector_ids = 2;
	optional bool is_input_connector = 3;
}

message CMsgSteamLearnProjectSnapshotConfig {
	optional int32 snapshot_type = 1 [(.description) = "enum"];
	optional .CMsgSteamLearnProjectSnapshotConfigAccountIDs config_account_ids = 2;
	optional .CMsgSteamLearnProjectSnapshotConfigAppIDs config_app_ids = 3;
}

message CMsgSteamLearnProjectSnapshotConfigAccountIDs {
	optional uint32 percent = 1;
	optional uint32 activity_recency_days = 2;
}

message CMsgSteamLearnProjectSnapshotConfigAppIDs {
	optional uint32 percent = 1;
	optional uint32 release_recency_days = 2;
}

message CMsgSteamLearnProjectSnapshotFilter {
	optional uint32 sample_reduce_percent = 1;
	optional .CMsgSteamLearnProjectSnapshotFilterHistogram histogram = 2;
}

message CMsgSteamLearnProjectSnapshotFilterHistogram {
	optional string data_element_path = 1;
	optional float min_value = 2;
	optional float max_value = 3;
	optional uint32 num_buckets = 4;
}

message CMsgSteamLearnRawDataElement {
	optional float float_value = 1;
	optional string string_value = 2;
}

message CMsgSteamLearnScheduledTrainConfig {
	optional uint32 frequency_seconds = 1;
}

message CMsgSteamLearnTrainConfig {
	optional uint32 fetch_workers = 1;
	optional uint32 fetch_chunk_size = 2;
	optional uint32 train_batch_size = 3;
	optional uint32 train_epoch_count = 4;
	optional float train_loss_improvement_threshold = 5;
	optional uint32 train_no_loss_improvement_epoch_limit = 6;
}

message CMsgSteamLearnTrainInfo {
	optional uint32 fetch_id = 1;
	optional uint32 train_id = 2;
}

service SteamLearn {
	rpc BatchOperation (.NotImplemented) returns (.CMsgSteamLearn_BatchOperation_Response);
	rpc CacheData (.NotImplemented) returns (.CMsgSteamLearn_CacheData_Response);
	rpc CreateProject (.CMsgSteamLearn_CreateProject_Request) returns (.CMsgSteamLearn_CreateProject_Response);
	rpc EditProject (.CMsgSteamLearn_EditProject_Request) returns (.CMsgSteamLearn_EditProject_Response);
	rpc GetDataSource (.CMsgSteamLearn_GetDataSource_Request) returns (.CMsgSteamLearn_GetDataSource_Response);
	rpc GetFetchStatus (.CMsgSteamLearn_GetFetchStatus_Request) returns (.CMsgSteamLearn_GetFetchStatus_Response);
	rpc GetFetchStatusVersions (.CMsgSteamLearn_GetFetchStatusVersions_Request) returns (.CMsgSteamLearn_GetFetchStatusVersions_Response);
	rpc GetProject (.CMsgSteamLearn_GetProject_Request) returns (.CMsgSteamLearn_GetProject_Response);
	rpc GetTrainStatus (.CMsgSteamLearn_GetTrainStatus_Request) returns (.CMsgSteamLearn_GetTrainStatus_Response);
	rpc GetTrainStatusVersions (.CMsgSteamLearn_GetTrainStatusVersions_Request) returns (.CMsgSteamLearn_GetTrainStatusVersions_Response);
	rpc Inference (.NotImplemented) returns (.CMsgSteamLearn_Inference_Response);
	rpc InferenceBackend (.CMsgSteamLearn_InferenceBackend_Request) returns (.CMsgSteamLearn_InferenceBackend_Response);
	rpc ListDataSources (.CMsgSteamLearn_ListDataSources_Request) returns (.CMsgSteamLearn_ListDataSources_Response);
	rpc ListProjects (.CMsgSteamLearn_ListProjects_Request) returns (.CMsgSteamLearn_ListProjects_Response);
	rpc PublishProject (.CMsgSteamLearn_PublishProject_Request) returns (.CMsgSteamLearn_PublishProject_Response);
	rpc RegisterDataSource (.NotImplemented) returns (.CMsgSteamLearn_RegisterDataSource_Response);
	rpc SnapshotProject (.NotImplemented) returns (.CMsgSteamLearn_SnapshotProject_Response);
	rpc Train (.CMsgSteamLearn_Train_Request) returns (.CMsgSteamLearn_Train_Response);
}

